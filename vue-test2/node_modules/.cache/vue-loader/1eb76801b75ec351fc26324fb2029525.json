{"remainingRequest":"/home/livio/code/VueDemo/vue-test2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/livio/code/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/livio/code/VueDemo/vue-test2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/livio/code/VueDemo/vue-test2/src/views/Subject.vue?vue&type=template&id=6a0b35e2&scoped=true&","dependencies":[{"path":"/home/livio/code/VueDemo/vue-test2/src/views/Subject.vue","mtime":1579184815865},{"path":"/home/livio/code/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js","mtime":1577176397029},{"path":"/home/livio/code/VueDemo/vue-test2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1577176410852},{"path":"/home/livio/code/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js","mtime":1577176397029},{"path":"/home/livio/code/VueDemo/vue-test2/node_modules/vue-loader/lib/index.js","mtime":1577176410852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}