{"remainingRequest":"/home/livio/Code/vue/VueDemo/vue-test2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/livio/Code/vue/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/livio/Code/vue/VueDemo/vue-test2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/livio/Code/vue/VueDemo/vue-test2/src/views/Subject.vue?vue&type=template&id=6a0b35e2&scoped=true&","dependencies":[{"path":"/home/livio/Code/vue/VueDemo/vue-test2/src/views/Subject.vue","mtime":1588173476212},{"path":"/home/livio/Code/vue/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/livio/Code/vue/VueDemo/vue-test2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/livio/Code/vue/VueDemo/vue-test2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/livio/Code/vue/VueDemo/vue-test2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}